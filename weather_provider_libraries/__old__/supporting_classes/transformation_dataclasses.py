#!/usr/bin/env python
# -*- coding: utf-8 -*-


#  -------------------------------------------------------
#  SPDX-FileCopyrightText: 2019-2023 Alliander N.V.
#  SPDX-License-Identifier: MPL-2.0
#  -------------------------------------------------------


""" This module holds all the dataclasses involved in harmonisation and transforming data.

When using the term harmonisation in this project, we mean the process of taking a data field and translating it to
 the ECCODES standard format and name of that field if such a field exists, and translating to an approximation of what
 ECCODES would likely use as the standard format if it doesn't.

The basis for the ECCODES standard format is the ECCODES Parameter Database. Name, short name and the units for any
 field will be derived from any fields Parameter ID.

Examples:
    "Temperature at 2m height":     The 2m temperature field is known within the ECCODES parameter database as
                                     parameter ID 500011. This means that the Harmonised field name will be set at
                                     "2m Temperature".

"""
from typing import Optional

from pydantic import Field
from pydantic.dataclasses import dataclass


@dataclass
class WPLHarmonisationField:
    """A Class used to specify a WPL Model field type.

    This is used to identify and format data.

    Attributes:
        original_name (str):                    A string holding the original naam for the field
        original_format (str):                  An optional Pint interpretable string indicating the format of the
                                                 original field.
        eccodes_id_or_unit_spec (int | str):    The ECCODES ID or measuring unit specification
        harmonised_name_overwrite (str):        An optional string indicating a harmonised name to use, instead of the
                                                 one generated by ECCODES. Should normally only be used no ECCODES ID
                                                 is applicable, or the field content does NOT quite match the content by
                                                 exception.
    """

    original_name: str = Field(str)
    original_format: Optional[str] = Field(Optional[str])  # TODO: Regex for value formatting?
    eccodes_id_or_unit_spec: int | str = Field(int | str)
    harmonised_name_overwrite: Optional[str] = Field(Optional[str])

    @property
    def si_unit(self) -> str:
        return ...

    @property
    def human_metric_unit(self) -> str:
        return ...

    @property
    def human_imperial_unit(self) -> str:
        return ...


@dataclass
class WPLHarmonisationTranslationGrid:
    """ """

    fields: list[WPLHarmonisationField] = Field(list[WPLHarmonisationField])

    def get_field_by_name(self, field_name: str) -> WPLHarmonisationField:
        """

        Args:
            field_name (str):

        Returns:

        """
        ...

    def get_field_by_eccodes_id(self, eccodes_id: int) -> WPLHarmonisationField:
        """

        Args:
            eccodes_id (int):

        Returns:

        """
        ...
